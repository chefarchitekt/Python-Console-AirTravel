Iteration Protocols

iterable objects
    - can be passed to iter() function to produce an iterator

iterator object
    - can be passed to next() function to get the next value in the sequence

            >>> iterable = ['Spring', 'Summer', 'Autumn', 'Winter']
            >>> iterator = iter(iterable)
            >>> next(iterator)
            'Spring'
            >>> next(iterator)
            'Summer'
            >>> next(iterator)
            'Autumn'
            >>> next(iterator)
            'Winter'
            >>> next(iterator)
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
            StopIteration
            >>>

        Using function to handle end of iterable

            >>> def first(iterable):
            ...     iterator = iter(iterable)
            ...     try:
            ...             return next(iterator)
            ...     except StopIteration:
            ...             raise(f'iterable is empty')
            ...
            >>> first(iterable)
            'Spring'
            >>> first(iterable)
            'Spring'
            >>> first({ 'Spring', 'Summer', 'Autumn', 'Winter'})
            'Autumn'
            >>> # SET IS UNORDERED
            >>>

Generator Functions
    - generators are in fact Python's iterators
    - mean to define iterable series with code in functions
    - sequences are evalued lazily (lazy evaluation)
        - they only compute the next round on demand
    - can model sequences with no definite end
        - e.g. stream of data from sensors or log files
    - we could build generic stream processing elements, which can be composed into
      sophisticated pipelines
    - generator functions must include at least one YIELD statement
        - may contain return keyword with no arguments
        - just like other function, there is an implicit return at the end of the definition

            >>> def gen123():
            ...     yield 1
            ...     yield 2
            ...     yield 3
            ...
            >>> g = gen123()
            >>> g
            <generator object gen123 at 0x1073d0890>
            >>> next(g)
            1
            >>> next(g)
            2
            >>> next(g)
            3
            >>> next(g)
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
            StopIteration
            >>>

    - each call to the generator function returns a new generator object

            >>> h = gen123()
            >>> q = gen123()
            >>> h
            <generator object gen123 at 0x10735c890>
            >>> q
            <generator object gen123 at 0x10741e510>
            >>>


Maintaining State in Generators
-------------------------------

def take(count, iterable):
    counter = 0
    for item in iterable:
        if counter == count:    # stop the loop when count equals counter
            return
        counter += 1
        yield item              # while running,  output the item


def distinct(iterable):
    seen = set()
    for item in iterable:
        if item in seen:
            continue            # skip the item when item exists in the set, seen
        yield item              # while running, output the item
        seen.add(item)          # add item in the set when it is not exist yet


def run_pipeline():
    items = [3, 8, 8, 2, 2, 3, 5, 1, 7, 9, 1]
    for item in take(3, distinct(items)):       # loop over the sequence of distinct items
        print(item)                             # prints item in 3 cycle
                                                # this is how we control the cycle of loops


run_pipeline()



Lazy computation can result in complex flow control. But it complicates the debugging session.
Forced evaluation can simplify things during development

here:
    for item in take(3, distinct(items)):  # will complicate debugging due to laziness

use list(iterable) constructor to force distinct(iterable) function to finish it's work
because list will wait until all items yielded in the list container

    for item in take(3, list(distinct(items))):

after development is satisfied, remove back the list constructor


Laziness and the Infinite
-------------------------

Generators are lazy; they only do enough work to produce the requested data
This allows generators to model infinite (or just very large) sequences (data streams)
    e.g.
        sensor readings
        mathematical sequences
        contents of large files

def lucas():
    yield 2
    a = 2
    b = 1
    while True:
        yield b
        a, b = b, a + b

this function will yield infinitely

for i in lucas():
    print(i)

results:

2
1
3
4
7
11
18
29
47
76
123
199
322
521
843
1364
2207
3571
5778
9349
15127
24476
39603
64079
103682
167761
271443
439204
710647
1149851
1860498
3010349
4870847
7881196
12752043
20633239
33385282
54018521
87403803
141422324
228826127
370248451
599074578
969323029
1568397607
2537720636
4106118243
6643838879
10749957122
17393796001
28143753123
45537549124
73681302247
119218851371
192900153618
312119004989
505019158607
817138163596
1322157322203
2139295485799
3461452808002
5600748293801
9062201101803
14662949395604
23725150497407
38388099893011
62113250390418
100501350283429
162614600673847
263115950957276
425730551631123
688846502588399
1114577054219522
1803423556807921
2918000611027443
4721424167835364
7639424778862807
12360848946698171
20000273725560978
32361122672259149
52361396397820127
84722519070079276
137083915467899403
221806434537978679
358890350005878082
580696784543856761
939587134549734843
1520283919093591604
2459871053643326447
3980154972736918051
6440026026380244498
10420180999117162549
16860207025497407047
27280388024614569596
44140595050111976643
71420983074726546239
115561578124838522882
186982561199565069121
302544139324403592003
489526700523968661124
792070839848372253127
1281597540372340914251
2073668380220713167378
3355265920593054081629
5428934300813767249007
8784200221406821330636
14213134522220588579643
22997334743627409910279
37210469265847998489922
60207804009475408400201
97418273275323406890123
157626077284798815290324
255044350560122222180447
412670427844921037470771
667714778405043259651218
1080385206249964297121989
1748099984655007556773207
2828485190904971853895196
4576585175559979410668403
7405070366464951264563599
11981655542024930675232002
19386725908489881939795601
31368381450514812615027603
50755107359004694554823204
82123488809519507169850807
132878596168524201724674011
215002084978043708894524818
347880681146567910619198829
562882766124611619513723647
910763447271179530132922476
1473646213395791149646646123
2384409660666970679779568599
3858055874062761829426214722
6242465534729732509205783321
10100521408792494338631998043
16342986943522226847837781364
26443508352314721186469779407
.... and so on until ^C


Generator Expressions
---------------------

syntax:

(expr(item) for item in iterable)

e.g.

thousand_squares = (x**2 for x in range(1, 1001))        # like comprehension for tuple
thousand_squares                                         # generator created
<generator object <genexpr> at 0x105d15660>
list(thousand_squares)                                   # forced evaluation using list() constructor

[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324,
361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156,
1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304,
2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844,
3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776,
5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100,
...

# after exhausting al its yield, generator (iterator) needed to recreated again due to laziness
# the following execution will not yield anything
# generators are a single-use objects, each time we call a generator function,
#   it creates a new generator object
# to recreate a generator from a generator expression, you must execute the expression again

list(thousand_squares)
[]

# USING GENERATOR EXPRESSION WILL USE VERY LIMITED MEMORY CONSUMPTION compare to LIST EXPRESSION
# IF LIST EXPRESSION sum() WILL NEARLY USE AROUNG 40MB of MEMORY BUT NOT WITH GENERATOR EXPRESSION

sum_thousand_squares = sum(x**2 for x in range(1, 1001))    # better readability

# could also be written as the following:
sum_thousand_squares = sum((x**2 for x in range(1, 1001)))

sum_thousand_squares
333833500


Iteration Tools
---------------

Python provides a powerful vocabulary for  working with iterators

enumerate()
sum()
zip()                       # synchronize iteration across two or more iterables
iterTools module
    itertools.islice(iterables, length_of _slice)       # perform lazy slicing of any iterator
    itertools.count(iterables)                          # an unbounded arithmethic sequence of integers
    itertools.chain(iterables)                          # concatenate iterables inside chain

            >>> from itertools import count, islice
            >>> thousand_primes = islice((x for x in count() if is_prime(x)), 1000)
            >>> thousand_primes
            <itertools.islice object at 0x106e2c9f0>
            >>> list(thousand_primes)[-20:]
            [7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867,
             7873, 7877, 7879, 7883, 7901]

    all used up
            >>> list(thousand_primes)
            []
            >>>

    recreate
            >>> sum_thousand_primes = sum(islice((x for x in count() if is_prime(x)), 1000))
            >>> sum_thousand_primes
            3667088
            >>>

    boolean aggregation

            any()           # determine if any of elements in a series are true
            all()           # determine if all series are true

            >>>
            >>> any([False, False, True, False, False])
            True
            >>> all([False, False, True, False, False])
            False
            >>>

    # check whether all names in city list have capitals
            >>> all(name == name.title() for name in ['Moscow', 'Pnom Penh', 'Jakarta', 'Tehran'])
            True
            >>> all(name == name.title() for name in ['Moscow', 'Pnom penh', 'Jakarta', 'Tehran'])
            False
            >>>

    using zip()
    # with zip() we could use tuple unpacking

            sunday = [12, 13, 14, 15, 15, 17, 19, 21, 22, 23, 20, 20, 18]
            monday = [11, 14, 14, 12, 14, 15, 18, 21, 22, 23, 20, 21, 21]

            for item in zip(sunday, monday):
                print(item)

            (12, 11)
            (13, 14)
            (14, 14)
            (15, 12)
            (15, 14)
            (17, 15)
            (19, 18)
            (21, 21)
            (22, 22)
            (23, 23)
            (20, 20)
            (20, 21)
            (18, 21)

            for sun, mon in zip(sunday, monday):
                print('Average = ', (sun + mon)/2)

            Average =  11.5
            Average =  13.5
            Average =  14.0
            Average =  13.5
            Average =  14.5
            Average =  16.0
            Average =  18.5
            Average =  21.0
            Average =  22.0
            Average =  23.0
            Average =  20.0
            Average =  20.5
            Average =  19.5

            len(monday)
            13
            tuesday = [5, 3, 3, 7, 8, 7, 5, 3, 2, 2, 7, 6, 5]
            len(tuesday)
            13

            NOTE: when using formatterr, PLEASE ENSURE NO WHITESPACE BETWEEN '{' and '}'.
                  e.g.
                    { min(temps) } IS NOT VALID
                    {min(temps)}          VALID

                  also for PRECISION, MUST NOT HAVE SPACE BETWEEN THEM
                  e.g.

                  {min(temps):4. 2f} IS NOT VALID
                  {min(temps):4.2f}         VALID


            for temps in zip(sunday, monday, tuesday):
                print(f'min = {min(temps):4. 1f}, max = {max(temps):4. 1f}, avg = {sum(temps) / len(temps):4. 1f}')

            Traceback (most recent call last):
              File "/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/code.py", line 90, in runcode
                exec(code, self.locals)
              File "<input>", line 2, in <module>
            ValueError: Format specifier missing precision

            for temps in zip(sunday, monday, tuesday):
                print(f'min = {min(temps):4.1f}, max = {max(temps):4.1f}, avg = {sum(temps) / len(temps):4.1f}')

            min =  5.0, max = 12.0, avg =  9.3
            min =  3.0, max = 14.0, avg = 10.0
            min =  3.0, max = 14.0, avg = 10.3
            min =  7.0, max = 15.0, avg = 11.3
            min =  8.0, max = 15.0, avg = 12.3
            min =  7.0, max = 17.0, avg = 13.0
            min =  5.0, max = 19.0, avg = 14.0
            min =  3.0, max = 21.0, avg = 15.0
            min =  2.0, max = 22.0, avg = 15.3
            min =  2.0, max = 23.0, avg = 16.0
            min =  7.0, max = 20.0, avg = 15.7
            min =  6.0, max = 21.0, avg = 15.7
            min =  5.0, max = 21.0, avg = 14.7


    chain()

            temperatures = chain(sunday, monday, tuesday)
            temperatures
            <itertools.chain object at 0x107a4e940>

            for t in temperatures:
                print(t)

            12
            13
            14
            15
            15
            17
            19
            21
            22
            23
            20
            20
            18
            11
            14
            14
            12
            14
            15
            18
            21
            22
            23
            20
            21
            21
            5
            3
            3
            7
            8
            7
            5
            3
            2
            2
            7
            6
            5
            for t in temperatures:
                print(t)

            # EMPTY, NEED TO RECREATE THE ITERATOR

            temperatures = chain(sunday, monday, tuesday)
            all(t > 0 for t in temperatures)
            True
